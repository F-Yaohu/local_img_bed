version: '3.8'

services:
  mysql: # 如果不想自己安装喝配置数据库，可以直接用这个，数据库会自动初始化
    image: mysql:5.7.40
    container_name: local_img_bed_mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: your_mysql_root_password # 你的数据库root密码
      MYSQL_DATABASE: local_img_bed # 数据库名
      MYSQL_USER: local_img_bed_user  # 使用用户
      MYSQL_PASSWORD: your_mysql_password # 密码
    ports:
      - "13336:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql-init-scripts:/docker-entrypoint-initdb.d

  app: # 后端服务
    build:
      context: .
      dockerfile: Dockerfile
    container_name: local_img_bed_app
    restart: always
    environment:
      - DB_URL=jdbc:mysql://mysql:3306/local_img_bed?useSSL=false&serverTimezone=Asia/Shanghai # 数据库地址，可以改成自己的
      - DB_USERNAME=local_img_bed_user # 数据库用户，和上面保持一直
      - DB_PASSWORD=your_mysql_password # 数据库密码，和上面保持一直
      - JWT_SECRET=${JWT_SECRET}  # 建议长度≥32字符，建议修改为自己的
      - ADMIN_USERNAME=${ADMIN_USERNAME} # 启动后登录账号
      - ADMIN_PASSWORD=${ADMIN_PASSWORD} # 启动后登录密码。建议修改
      - IMAGE_STORAGE_ROOT_PATH=/data/images # 告知Spring Boot容器内的图片路径
    volumes:
      - image_data:/data/images # 将图片存储在Docker卷中
    depends_on:
      - mysql

  frontend: # 前端服务
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: local_img_bed_frontend
    restart: always

  nginx-proxy: # nginx
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: local_img_bed_nginx_proxy
    restart: always
    ports:
      - "8198:80" # 用户访问的唯一入口, 改为8198避免冲突
    volumes:
      - image_data:/var/www/images:ro # 以只读方式挂载图片卷，供Nginx读取
    depends_on:
      - app
      - frontend

volumes:
  image_data:
  mysql_data:
